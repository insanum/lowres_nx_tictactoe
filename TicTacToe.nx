
' 160 X 128
' 8X8 CHARS = 20 X 16

GLOBAL W,H,WG,HG,CW,CH,XX,OO,AI,USR,CORNER

RANDOMIZE TIMER

' SCREEN WIDTH AND HEIGHT (BG)
W=20
H=16

' HORIZONTAL AND VERTICAL LINES EDGE PADDING
WG=1
HG=1

' SCREEN WIDTH AND HEIGHT (SPRITES)
CW=160
CH=128

' PIECE CHARACTERS
XX=56
OO=47

' GAME BOARD
DIM GLOBAL B(2,2)
AI=XX
USR=OO
CORNER=RND(3)

SUB NUM_MOVES(MOVES)
  MOVES=0
  FOR I=0 TO 2
    FOR J=0 TO 2
       IF B(I,J)<>0 THEN INC MOVES
    NEXT J
  NEXT I
END SUB

SUB DRAW_BOARD
  ' VERTICAL LINES
  BG FILL (W / 3),(0 + HG) TO (W / 3),((H - 1) - HG) CHAR 64
  BG FILL ((W / 3) * 2),(0 + HG) TO ((W / 3) * 2),((H - 1) - HG) CHAR 64
    
  ' HORIZONTAL LINES
  BG FILL (0 + WG),(H / 3) TO ((W - 1) - WG),(H / 3) CHAR 65
  BG FILL (0 + WG),((H / 3) * 2) TO ((W - 1) - WG),((H / 3) * 2) CHAR 65
    
  ' CROSS CONNECTORS
  CELL (W / 3),(H / 3),66
  CELL (W / 3),((H / 3) * 2),66
  CELL ((W / 3) * 2),(H / 3),66
  CELL ((W / 3) * 2),((H / 3) * 2),66
END SUB

CALL DRAW_BOARD

SUB WINNER(I, J)
  LOCATE 0,15
  IF B(I,J)=AI THEN
    PRINT "I WIN, YOU SUCK!!!"
  ELSE
    PRINT "OMG, YOU WON!!!"
  END IF
  END
END SUB

SUB TIE
  LOCATE 0,15
  PRINT "TIE!!!"
  END
END SUB

SUB CHECK_FOR_WINNER
  IF B(0,0)<>0 AND B(0,0)=B(0,1) AND B(0,0)=B(0,2) THEN CALL WINNER(0,0)
  IF B(1,0)<>0 AND B(1,0)=B(1,1) AND B(1,0)=B(1,2) THEN CALL WINNER(1,0)
  IF B(2,0)<>0 AND B(2,0)=B(2,1) AND B(2,0)=B(2,2) THEN CALL WINNER(2,0)
  IF B(0,0)<>0 AND B(0,0)=B(1,0) AND B(0,0)=B(2,0) THEN CALL WINNER(0,0)
  IF B(0,1)<>0 AND B(0,1)=B(1,1) AND B(0,1)=B(2,1) THEN CALL WINNER(0,1)
  IF B(0,2)<>0 AND B(0,2)=B(1,2) AND B(0,2)=B(2,2) THEN CALL WINNER(0,2)
  IF B(0,0)<>0 AND B(0,0)=B(1,1) AND B(0,0)=B(2,2) THEN CALL WINNER(0,0)
  IF B(0,2)<>0 AND B(0,2)=B(1,1) AND B(0,2)=B(2,0) THEN CALL WINNER(0,2)
  MOVES=0
  CALL NUM_MOVES(MOVES)
  IF MOVES=9 THEN CALL TIE
END SUB

SUB CHECK_POSITION(I, J, FILLED)
  FILLED=0
  IF B(I,J)<>0 THEN FILLED=1
END SUB

SUB DRAW_MOVE(I, J, P)
  B(I,J)=P
    
  IF J=0 THEN
    X=((W / 3) - 3)
  ELSE IF J=1 THEN
    X=((W / 3) + 3)
  ELSE
    X=(((W / 3) * 2) + 2)
  END IF
    
  IF I=0 THEN
    Y=((H / 3) - 3)
  ELSE IF I=1 THEN
    Y=((H / 3) + 2)
  ELSE
    Y=(((H / 3) * 2) + 2)
  END IF
    
  BG FILL X,Y TO (X + 1),(Y + 1) CHAR P
END SUB

SUB GET_POSITION(X, Y, I, J)
  IF X<(CW / 3) AND Y<(CH / 3) THEN
    I=0
    J=0
  ELSE IF X>(CW / 3) AND X<((CW / 3) * 2) AND Y<(CH / 3) THEN
    I=0
    J=1
  ELSE IF X>((CW / 3) * 2) AND Y<(CH / 3) THEN
    I=0
    J=2
  ELSE IF X<(CW / 3) AND Y>(CH / 3) AND Y<((CH / 3) * 2) THEN
    I=1
    J=0
  ELSE IF X>(CW / 3) AND X<((CW / 3) * 2) AND Y>(CH / 3) AND Y<((CH / 3) * 2) THEN
    I=1
    J=1
  ELSE IF X>((CW / 3) * 2) AND Y>(CH / 3) AND Y<((CH / 3) * 2) THEN
    I=1
    J=2
  ELSE IF X<(CW / 3) AND Y>((CH / 3) * 2) THEN
    I=2
    J=0
  ELSE IF X>(CW / 3) AND X<((CW / 3) * 2) AND Y>((CH / 3) * 2) THEN
    I=2
    J=1
  ELSE IF X>((CW / 3) * 2) AND Y>((CH / 3) * 2) THEN
    I=2
    J=2
  END IF
END SUB

SUB GET_OP(P, OP)
  IF P=XX THEN
    OP=OO
  ELSE
    OP=XX
  END IF
END SUB

SUB CHECK_L(P, ROW, ROW_MAX, COL, COL_MAX, MOVE)
  MOVE=0
  XMOVE=0
  
  OP=0
  CALL GET_OP(P, OP)
  
  FOR I=ROW TO ROW_MAX
    FOR J=COL TO COL_MAX
      ' IF THERE IS AN OPPOSITE PIECE THEN
      ' NO MOVE IS REQUIRED IN THIS LINE
      IF B(I,J)=OP THEN EXIT SUB
      
      ' IF THIS SPACE IS EMPTY IT IS A
      ' POSSIBLE MOVE LOCATION
      IF B(I,J)=0 THEN
        ' IF THERE IS ALREADY A POSSIBLE
        ' MOVE LOCATION THEN NO MOVE
        IF XMOVE=1 THEN EXIT SUB
        ' SAVE POSSIBLE MOVELOCATION
        XMOVE=1
        ROW=I
        COL=J
      END IF
    NEXT J
  NEXT I
  
  MOVE=XMOVE
END SUB

SUB CHECK_D(P, ROW, COL, MOVE)
  MOVE=0
  XMOVE=0
  
  OP=0
  CALL GET_OP(P, OP)
  
  FOR I=0 TO 2
    ' IF THERE IS AN OPPOSITE PIECE THEN
    ' NO MOVE IS REQUIRED IN THIS LINE
    IF B(I,I)=OP THEN GOTO NEXT_DIAG
      
    ' IF THIS SPACE IS EMPTY IT IS A
    ' POSSIBLE MOVE LOCATION
    IF B(I,I)=0 THEN
      ' IF THERE IS ALREADY A POSSIBLE
      ' MOVE LOCATION THEN NO MOVE
      IF XMOVE=1 THEN GOTO NEXT_DIAG
      ' SAVE POSSIBLE MOVE LOCATION
      XMOVE=1
      ROW=I
      COL=I
    END IF
  NEXT I
  
  MOVE=XMOVE
  IF MOVE=1 THEN EXIT SUB
  
  NEXT_DIAG:
  
  MOVE=0
  XMOVE=0
  
  FOR I=0 TO 2
    ' IF THERE IS AN OPPOSITE PIECE THEN
    ' NO MOVE IS REQUIRED IN THIS LINE
    IF B(I,(2-I))=OP THEN EXIT SUB
      
    ' IF THIS SPACE IS EMPTY IT IS A
    ' POSSIBLE MOVE LOCATION
    IF B(I,(2-I))=0 THEN
      ' IF THERE IS ALREADY A POSSIBLE
      ' MOVE LOCATION THEN NO MOVE
      IF XMOVE=1 THEN EXIT SUB
      ' SAVE POSSIBLE MOVE LOCATION
      XMOVE=1
      ROW=I
      COL=(2-I)
    END IF
  NEXT I
  
  MOVE=XMOVE
END SUB

SUB CHECK_LINE(P, ROW, ROW_MAX, COL, COL_MAX, MOVED)
  MOVE=0
  CALL CHECK_L(P, ROW, ROW_MAX, COL, COL_MAX, MOVE)
  IF MOVE=1 THEN
    CALL DRAW_MOVE(ROW,COL,AI)
  END IF
  MOVED=MOVE
END SUB

SUB CHECK_DIAG(P, MOVED)
  MOVE=0
  ROW=0
  COL=0
  CALL CHECK_D(P, ROW, COL, MOVE)
  IF MOVE=1 THEN
    CALL DRAW_MOVE(ROW,COL,AI)
  END IF
  MOVED=MOVE
END SUB

SUB CHECK_WIN(WON)
  WON=0
  CALL CHECK_LINE(AI,0,0,0,2,WON)
  IF WON=1 THEN EXIT SUB
  CALL CHECK_LINE(AI,1,1,0,2,WON)
  IF WON=1 THEN EXIT SUB
  CALL CHECK_LINE(AI,2,2,0,2,WON)
  IF WON=1 THEN EXIT SUB
  CALL CHECK_LINE(AI,0,2,0,0,WON)
  IF WON=1 THEN EXIT SUB
  CALL CHECK_LINE(AI,0,2,1,1,WON)
  IF WON=1 THEN EXIT SUB
  CALL CHECK_LINE(AI,0,2,2,2,WON)
  IF WON=1 THEN EXIT SUB
  CALL CHECK_DIAG(AI,WON)
  IF WON=1 THEN EXIT SUB
END SUB

SUB CHECK_BLOCK(BLOCKED)
  BLOCKED=0
  CALL CHECK_LINE(USR,0,0,0,2,BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
  CALL CHECK_LINE(USR,1,1,0,2,BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
  CALL CHECK_LINE(USR,2,2,0,2,BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
  CALL CHECK_LINE(USR,0,2,0,0,BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
  CALL CHECK_LINE(USR,0,2,1,1,BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
  CALL CHECK_LINE(USR,0,2,2,2,BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
  CALL CHECK_DIAG(USR,BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
END SUB

SUB MAKE_MOVE
  MOVES=0
  CALL NUM_MOVES(MOVES)
  
  ' CHECK FOR THE WIN!
  WON=0
  CALL CHECK_WIN(WON)
  IF WON=1 THEN EXIT SUB
  
  ' FIRST TO MOVE, TAKE A CORNER
  IF MOVES=0 OR (MOVES=1 AND B(1,1)=USR) THEN
    IF CORNER=0 THEN
      CALL DRAW_MOVE(0,0,AI)
    ELSE IF CORNER=1 THEN
      CALL DRAW_MOVE(0,2,AI)
    ELSE IF CORNER=2 THEN
      CALL DRAW_MOVE(2,0,AI)
    ELSE
      CALL DRAW_MOVE(2,2,AI)
    END IF
    EXIT SUB
  END IF
  
  ' THIRD TO MOVE, TAKE OPPOSITE CORNER
  IF MOVES=2 THEN
    IF CORNER=0 AND B(2,2)=0 THEN
      CALL DRAW_MOVE(2,2,AI)
      EXIT SUB
    ELSE IF CORNER=1 AND B(2,0)=0 THEN
      CALL DRAW_MOVE(2,0,AI)
      EXIT SUB
    ELSE IF CORNER=2 AND B(0,2)=0 THEN
      CALL DRAW_MOVE(0,2,AI)
      EXIT SUB
    ELSE IF B(0,0)=0 THEN
      CALL DRAW_MOVE(0,0,AI)
      EXIT SUB
    END IF
  END IF
  
  ' CHECK FOR REQUIRED BLOCKS
  BLOCKED=0
  CALL CHECK_BLOCK(BLOCKED)
  IF BLOCKED=1 THEN EXIT SUB
  
  ' CHECK IF MIDDLE OPEN
  IF B(1,1)=0 THEN
      CALL DRAW_MOVE(1,1,AI)
      EXIT SUB
  END IF
  
  ' BLOCK CASE WHERE USER HAS TWO CORNERS
  IF (B(0,0)=USR AND B(2,2)=USR) OR (B(2,0)=USR AND B(0,2)=USR) THEN
      ' TAKE ANY MIDDLE EDGE SPOT
      IF B(0,1)=0 THEN
          CALL DRAW_MOVE(0,1,AI)
          EXIT SUB
      ELSE IF B(2,1)=0 THEN
          CALL DRAW_MOVE(2,1,AI)
          EXIT SUB
      ELSE IF B(1,0)=0 THEN
          CALL DRAW_MOVE(1,0,AI)
          EXIT SUB
      ELSE IF B(1,2)=0 THEN
          CALL DRAW_MOVE(1,2,AI)
          EXIT SUB
      END IF
  END IF
  
  ' FIND OPEN SPOT
  FOR I=0 TO 2
    FOR J=0 TO 2
      IF B(I,J)=0 THEN
        CALL DRAW_MOVE(I,J,AI)
        EXIT SUB
      END IF
    NEXT J
  NEXT I
  
END SUB

FIRST=RND(1)

IF FIRST=0 THEN
  CALL MAKE_MOVE
ELSE
  AI=OO
  USR=XX
  LOCATE 0,15
  PRINT "YOU GO FIRST..."
END IF

TOUCHSCREEN
DO
  LOCATE 0,15
  IF TOUCH THEN
    PRINT "               "
    I=0
    J=0
    FILLED=0
    CALL GET_POSITION(TOUCH.X,TOUCH.Y,I,J)
    CALL CHECK_POSITION(I,J,FILLED)
    IF FILLED=0 THEN
      CALL DRAW_MOVE(I,J,USR)
      CALL CHECK_FOR_WINNER
      CALL MAKE_MOVE
      CALL CHECK_FOR_WINNER
    END IF
  END IF
  WAIT VBL
LOOP

#2:MAIN CHARACTERS
00000000000000000000000000000000
00181C1C1C0C180C00000404040C000C
006C7E36120000000000121212000000
00247E3F367E3F120000001B12001B12
00083E3F1E3F1F040000000710011704
0062753A142E57230000113204081123
001C3E3A7E773A1D00000A021013001D
00181C3C180000000000040C18000000
000C1E3C38180C060000060C08000006
0030180C0E1E3C180000000002060C18
0000241A7E3F2C120000000200270812
0000181C7E3F1C0C000000040027040C
00000000181C3C180000000000040C18
000000007E3F000000000000003F0000
0000000000181C0C000000000000040C
00060F1E3C787020000003060C183020
003C7E7F777F3F1E000018110119031E
00183C1C1C1C7E3F000004040404003F
003C7E3F1E3C7E3F00001833060C003F
003C7E3F06673F1E000018330001031E
0066777F3F0707030000110139010103
007E7F7C3E077F3E00001F003801033E
001C3E7C7E773F1E00000E001811031E
007E3F0F1E3C381800003903060C0818
003C7E3F7E773F1E000018031811031E
003C7E3F1F673F1E000018011901031E
000000180C180C00000000000C000C00
000000180C183C18000000000C000C18
00000C1E3C180C06000000060C000006
0000007E3F7E3F00000000003F003F00
000030180C1E3C180000000000060C18
003C7E3F1E0C180C00001833060C000C
003C7E7F7F773C1E000018111117001E
00183C7E7F7F77330000001801191133
007C7E7F7E777F3E000018031811033E
003C7E7370763F1E000018131010031E
00787C76777F7E3C000010101113063C
007E7F787C707E3F00001F001C10003F
007E7F787C70703000001F001C101030
003C7E7E77773F1E00001E101111031E
0066777F7F7777330000110119111133
003C1E1C1C1C3C1E000006040404001E
001E0F0707673F1E000009010101031E
00667F7E7C7C76330000130604101033
0060707070707E3F000010101010003F
0042677F7F7F77330000010101191133
0066777F7F7777330000010111111133
003C7E7777773F1E000018111111031E
007C7E7F7E707030000018031E101030
003C7E777B7D3E1F000018111111001F
007C7E7F7E7C76330000180306101033
003E7F3C1E077F3E00001F001801033E
007E3F1C1C1C1C0C000027040404040C
0066777777773F1E000011111111031E
00667777773F1E0C000011111103060C
0066777F7F7F73210000110101193121
00663F1E3C7E77330000030600181133
0066773F1E1C1C0C000011030604040C
007E3F1E3C787E3F000033060C18003F
003C3E3838383C1E00000E080808001E
006030180C0603010000000000000101
003C1E0E0E0E3E1E000012020202021E
00183C7E330000000000001833000000
0000000000007E3F000000000000003F
18181818181818180000000000000000
000000FFFF0000000000000000000000
181818FFFF1818180000000000000000

